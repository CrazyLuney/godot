import os

ENROTH_DIR = "enroth"
ENROTH_SRC_DIR = os.path.join(ENROTH_DIR, "src")
ENROTH_LIBS = ["AssetTools", "IO", "Types", "Utility"]

# TODO: builtin zlib ?
ZLIB_DIR = os.path.join("#thirdparty", "zlib")

class LibrarySourcesCollector:
    SOURCE_SUFFIXES = [".cpp"]
    HEADER_SUFFIXES = [".h", ".hpp"]

    def __init__(self, root):
        self.sources = []
        self.headers = []
        self.root = root
        self.collect()

    def collect_accept_dir(self, node):
        self.collect_traverse(node, recursive=True)

    def collect_accept_file(self, node):
        suffix = node.suffix.lower()
        if suffix in self.SOURCE_SUFFIXES:
            self.sources.append(node)
        elif suffix in self.HEADER_SUFFIXES:
            self.headers.append(node)

    def collect_traverse(self, node, recursive=True):
        from SCons import Node
        from SCons.Script import Glob

        for f in Glob(os.path.join(str(node), "*"), source=True):
            if isinstance(f, Node.FS.Dir) and recursive:
                self.collect_accept_dir(f)
            elif isinstance(f, Node.FS.File):
                self.collect_accept_file(f)

    def collect(self, recursive=True):
        from SCons import Node

        if isinstance(self.root, (str, bytes)):
            self.root = Dir(self.root)
        self.collect_traverse(self.root, recursive=recursive)

def generate_enroth_types(env, enroth_dir = ENROTH_DIR):
    print("enroth-generate-types: configure...")

    if env.Execute("cmake -B build -S . -DGODOT=ON", chdir=enroth_dir):
        print("enroth-generate-types: cmake config failed")
        return
    
    print("enroth-generate-types: run...")

    if env.Execute("cmake --build build --target DBGenerateTypes --config release", chdir=enroth_dir):
        print("enroth-generate-types: cmake build failed")
        return
    
    print("enroth-generate-types: done")

Import("env")
Import("env_modules")

# types
if env["enroth_generate_types"]:
    generate_enroth_types(env)

# library
enroth_objs = []
enroth_libs = []

env_enroth_library = env_modules.Clone()

env_enroth_library.Append(CPPPATH=[ZLIB_DIR, ENROTH_SRC_DIR])
env_enroth_library.Append(CPPDEFINES=["GODOT_MODULE"])

if env.msvc:
    env_enroth_library.Append(CPPDEFINES=["_CRT_SECURE_NO_WARNINGS"])

for lib in ENROTH_LIBS:
    collector = LibrarySourcesCollector(os.path.join(ENROTH_SRC_DIR, lib))

    env_enroth_library.add_source_files(enroth_objs, collector.sources)

    # hacky
    if env["vsproj"]:
        env.vs_incs += [f.path for f in collector.headers]

env.modules_sources += enroth_objs

# module
module_objs = []

env_enroth_module = env_modules.Clone()

env_enroth_module.Append(CPPPATH=[ENROTH_SRC_DIR])

env_enroth_module.add_source_files(module_objs, "*.cpp")

if env.editor_build:
    env_enroth_module.add_source_files(module_objs, "editor/*.cpp")

env.modules_sources += module_objs

env.Depends(module_objs, enroth_objs)
env.Depends(module_objs, enroth_libs)
