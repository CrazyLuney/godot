from os import path

LIBRARY_DIR = "enroth"
LIBRARY_SRC_DIR = path.join(LIBRARY_DIR, "src")
LIBRARY_LIB_DIRS = ["AssetTools", "IO", "Types", "Utility"]

# TODO: builtin zlib ?
ZLIB_DIR = path.join("#thirdparty", "zlib")

def generate_types(env, library_dir = LIBRARY_DIR):
    print("enroth-generate-types: configure...")

    if env.Execute("cmake -B build -S . -DGODOT=ON", chdir=library_dir):
        print("enroth-generate-types: cmake config failed")
        return
    
    print("enroth-generate-types: run...")

    if env.Execute("cmake --build build --target DBGenerateTypes --config release", chdir=library_dir):
        print("enroth-generate-types: cmake build failed")
        return
    
    print("enroth-generate-types: done")

Import("env")
Import("env_modules")

# library
library_obj = []

env_enroth_library = env_modules.Clone()

generate_types(env_enroth_library)

env_enroth_library.Append(CPPPATH=[ZLIB_DIR, LIBRARY_SRC_DIR])

for dir in LIBRARY_LIB_DIRS:    
    env_enroth_library.add_source_files(library_obj, Glob(path.join(LIBRARY_SRC_DIR, dir, "*.cpp")))

env.modules_sources += library_obj

# module
module_obj = []

env_enroth_module = env_modules.Clone()

env_enroth_module.add_source_files(module_obj, "*.cpp")

env.modules_sources += module_obj

env.Depends(module_obj, library_obj)
